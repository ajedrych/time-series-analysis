end = 180)
# okresy in-sample i out-of-sample
dfs.in <-
window(dfs,
end = "2018-12")
dfs.out <-
window(dfs,
start = "2019-01" )
# okresy in-sample i out-of-sample
dfs.in <-
window(dfs,
end = c(2018, 12))
dfs.out <-
window(dfs,
start = c(2019, 01) )
# addytywny model Holta-Wintersa
DFs.HWadd <- HoltWinters(dfs.in,
seasonal = "additive") #szereg in-sample
# addytywny model Holta-Wintersa
dfs.HWadd <- HoltWinters(dfs.in,
seasonal = "additive") #szereg in-sample
# multiplikatywny model Holta-Wintersa
dfs.HWmult <- HoltWinters(dfs.in,
seasonal="multiplicative")
dfs.HWmult # info o modelu; beta bliska zero wiec nie ma duzego lokalnego trendu zmienijacego sie w czasie
dfs.HWadd
plot(dfs.HWadd)
plot(dfs.HWmult)
plot(dfs.HWadd)
plot(dfs.HWmult)
dfs.HWmult.forecast <- predict(dfs.HWadd,
n.ahead = 36,
prediction.interval = TRUE) #fit = prognoza, dalej dolny i gorny przedzia? ufnosci
dfs.HWadd.forecast <- predict(dfs.HWadd,
n.ahead = 36,
prediction.interval = TRUE) #fit = prognoza, dalej dolny i gorny przedzia? ufnosci
dfs.HWadd.forecast <- predict(dfs.HWadd,
n.ahead = 36,
prediction.interval = TRUE) #fit = prognoza, dalej dolny i gorny przedzial ufnosci
# oszacujmy prognozę na 36 obserwacji naprzód
dfs.HWmult.forecast <- predict(dfs.HWmult,
n.ahead = 36,
prediction.interval = TRUE) #fit = prognoza, dalej dolny i gorny przedzial ufnosci
# następnie porównajmy prognozę z oryginalnym szeregiem
plot(dfs.ts)
# następnie porównajmy prognozę z oryginalnym szeregiem
plot(dfs)
# następnie porównajmy prognozę z oryginalnym szeregiem
plot(dfs)
lines(dfs.HWadd.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie sie zaczyna out-of-sample
# obejrzyjmy prognozę w zbliżeniu
length(dfs)
# zmienimy w tym celu jedynie pierwszą linię (pierwsze polecenie)
plot(window(dfs, start = c(2018, 12)))
lines(dfs.HWadd.forecast[, 1], col = "blue")
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2)
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2)
abline(v = 2019, lty = 2)
dfs.HWadd$fitted[, 1]
dfs.HWmult$fitted[, 1]
dfs.HWadd.summary <-
window(dfs.HWadd$fitted[, 1], end =c(2018, 12) , extend = TRUE)
# w miejsce braków danych na końcu wstawiamy prognozy
window(dfs.HWadd.summary, start = c(2019, 1)) <-
dfs.HWadd.forecast[, 1]
dfs.HWadd$fitted[, 1]
dfs.HWadd.summary <-
window(dfs.HWadd$fitted[, 1], end =c(2021, 12) , extend = TRUE)
# w miejsce braków danych na końcu wstawiamy prognozy
window(dfs.HWadd.summary, start = c(2019, 1)) <-
dfs.HWadd.forecast[, 1]
dfs.HWadd.summary
dfs.HWmult.summary <-
window(dfs.HWmult$fitted[, 1], end =c(2021, 12) , extend = TRUE)
window(dfs.HWmult.summary, start = c(2019, 1)) <-
dfs.HWadd.forecast[, 1]
# w miejsce braków danych na końcu wstawiamy prognozy
window(dfs.HWadd.summary, start = c(2019, 1)) <-
dfs.HWadd.forecast[, 1]
window(dfs.HWmult.summary, start = c(2019, 1)) <-
dfs.HWmult.forecast[, 1]
dfs.HWadd$fitted[, 1]
dfs.HWmult$fitted[, 1]
dfs.HWadd.summary <-
window(dfs.HWadd$fitted[, 1], end =c(2021, 12) , extend = TRUE)
dfs.HWmult.summary <-
window(dfs.HWmult$fitted[, 1], end =c(2021, 12) , extend = TRUE)
# w miejsce braków danych na końcu wstawiamy prognozy
window(dfs.HWadd.summary, start = c(2019, 1)) <-
dfs.HWadd.forecast[, 1]
window(dfs.HWmult.summary, start = c(2019, 1)) <-
dfs.HWmult.forecast[, 1]
dfs.HWadd.summary
dfs.HWmult.summary
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
View(HW.summary)
View(HW.summary)
View(HW.summary)
HW.summary$mae_HWadd     <- abs(HW.summary$dfs.HWadd.summary-HW.summary$dfs)
library(xts)
HW.summary = as.xts(HW.summary)
HW.summary$mae_HWadd <- abs(HW.summary$dfs.HWadd.summary-HW.summary$dfs)
HW.summary$mse_HWadd   <- (HW.summary$dfs.HWadd.summary-HW.summary$dfs)^2
HW.summary$mape_HWadd   <- abs((HW.summary$dfs.HWadd.summary-HW.summary$dfs)/HW.summary$dfs)
HW.summary$amape_HWadd   <- abs((HW.summary$dfs.HWadd.summary-HW.summary$dfs)/(HW.summary$dfs.HWadd.summary+HW.summary$dfs))
HW.summary$mae_HWmult    <- abs(HW.summary$dfs.HWmult.summary-HW.summary$dfs)
HW.summary$mse_HWmult      <- (HW.summary$dfs.HWmult.summary-HW.summary$dfs)^2
HW.summary$mape_HWmult     <- abs((HW.summary$dfs.HWmult.summary-HW.summary$dfs)/HW.summary$dfs)
HW.summary$amape_HWmult    <- abs((HW.summary$dfs.HWmult.summary-HW.summary$dfs)/(HW.summary$dfs.HWmult.summary+HW.summary$dfs))
View(dfs.HWmult.forecast)
HW.summary
names(HW.summary)
ifelse(index(HW.summary) < "2019-01", 0, 1)
sample_period <-
ts(ifelse(index(HW.summary) < "2019-01", 0, 1),
start  =1, freq = 1)
names(HW.summary)
# utworzymy też zmienną indeksującą czas (date)
HW.summary$date <- index(dfs)
HW.summary$sample_period <- sample_period
names(HW.summary)
aggregate(HW.summary[, 4:11],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
HW.summary$sample_period <- sample_period
View(HW.summary)
View(HW.summary)
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
View(HW.summary)
View(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < 181, 0, 1),
start  =1, freq = 1)
# utworzymy też zmienną indeksującą czas (date)
HW.summary$date <- index(dfs)
HW.summary$sample_period <- sample_period
View(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < c("2019-01"), 0, 1),
start  =1, freq = 1)
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
HW.summary = as.xts(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < c("2019-01"), 0, 1),
start  =1, freq = 1)
HW.summary$sample_period <- sample_period
View(HW.summary)
View(HW.summary)
sample_period
# utworzymy też zmienną indeksującą czas (date)
HW.summary$date <- index(dfs)
HW.summary = as.xts(HW.summary)
# utworzymy też zmienną indeksującą czas (date)
HW.summary$date <- index(dfs)
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
# utworzymy też zmienną indeksującą czas (date)
HW.summary$date <- index(dfs)
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
HW.summary$sample_period <- sample_period
HW.summary <- ts.union(dfs,dfs.HWadd.summary,dfs.HWmult.summary)
library(xts)
HW.summary = as.xts(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < c("2019-01"), 0, 1),
start  =1, freq = 1)
sample_period = as.xts(sample_period)
View(sample_period)
View(sample_period)
# utworzymy też zmienną indeksującą czas (date)
index(sample_period) <- index(dfs)
sample_period <-
ts(ifelse(index(HW.summary) < c("2019-01"), 0, 1),
start  =1, freq = 1)
# utworzymy też zmienną indeksującą czas (date)
index(sample_period) <- index(dfs)
sample_period <-
ts(ifelse(index(HW.summary) < c("2019-01"), 0, 1),
start  =1, freq = 1)
sample_period = as.xts(sample_period)
merge(HW.summary,sample_period,join='left',fill=0)
View(sample_period)
View(sample_period)
merge(HW.summary,sample_period,join='left',fill=ifelse(index(HW.summary) < c("2019-01"), 0, 1))
HW.summary[,"sample_period"]["2019-01", ] <- 1
merge(HW.summary,sample_period,join='left',fill=ifelse(index(HW.summary) < c("2019-01"), 0, 1))
merge(HW.summary,sample_period,join='left',fill=ifelse(index(HW.summary) < 181, 0, 1))
merge(HW.summary,sample_period,join='left',fill=ifelse(index(HW.summary) < "2019-01", 0, 1))
View(HW.summary)
View(HW.summary)
HW.summary = as.xts(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < "2019-01", 1, 0),
start  =c(2004, 1), freq = 12)
names(HW.summary)
# utworzymy zmienna indeksujaca czas (date)
HW.summary$date <- index(dfs)
View(dfs.HWmult.forecast)
View(dfs.HWmult.forecast)
View(HW.summary)
View(HW.summary)
HW.summary$sample_period <- sample_period
View(HW.summary)
View(HW.summary)
sample_period <-
ts(ifelse(index(HW.summary) < "2019-01", 0, 1),
start  =c(2004, 1), freq = 12)
# utworzymy zmienna indeksujaca czas (date)
HW.summary$date <- index(dfs)
HW.summary$sample_period <- sample_period
HW.summary$mae_HWadd <- abs(HW.summary$dfs.HWadd.summary-HW.summary$dfs)
HW.summary$mse_HWadd   <- (HW.summary$dfs.HWadd.summary-HW.summary$dfs)^2
HW.summary$mape_HWadd   <- abs((HW.summary$dfs.HWadd.summary-HW.summary$dfs)/HW.summary$dfs)
HW.summary$amape_HWadd   <- abs((HW.summary$dfs.HWadd.summary-HW.summary$dfs)/(HW.summary$dfs.HWadd.summary+HW.summary$dfs))
HW.summary$mae_HWmult    <- abs(HW.summary$dfs.HWmult.summary-HW.summary$dfs)
HW.summary$mse_HWmult      <- (HW.summary$dfs.HWmult.summary-HW.summary$dfs)^2
HW.summary$mape_HWmult     <- abs((HW.summary$dfs.HWmult.summary-HW.summary$dfs)/HW.summary$dfs)
HW.summary$amape_HWmult    <- abs((HW.summary$dfs.HWmult.summary-HW.summary$dfs)/(HW.summary$dfs.HWmult.summary+HW.summary$dfs))
aggregate(HW.summary[, 4:11],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
HW.summary
names(HW.summary)
View(HW.summary)
View(HW.summary)
HW.summary$date <- NULL
aggregate(HW.summary[, 4:11],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
HW.summary
View(HW.summary)
View(HW.summary)
names(HW.summary)
aggregate(HW.summary[, 4:11],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
aggregate(HW.summary[, 4:12],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
dfs.HWmult.forecast <- predict(dfs.HWmult,
n.ahead = 36,
prediction.interval = TRUE) #fit = prognoza, dalej dolny i gorny przedzial ufnosci
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
library(rcompanion)
par(mfrow=c(1,2))
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWadd.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWadd.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model addytywny")
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model multiplikatywny")
xlab("")
library(rcompanion)
par(mfrow=c(1,2))
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
xlab("")
ylab("")
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model multiplikatywny")
xlab("")
ylab("")
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model addytywny")
# multiplikatywny model Holta-Wintersa
dfs.HWmult <- HoltWinters(dfs.in,
seasonal="multiplicative")
library(rcompanion)
par(mfrow=c(1,2))
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWadd.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model addytywny")
plot(dfs) # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model multiplikatywny")
library(rcompanion)
plot(window(dfs, start = c(2018, 12)))  # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWadd.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWadd.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWadd.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model addytywny")
plot(window(dfs, start = c(2018, 12)))  # porownanie prognozy z oryginalnym szeregiem
lines(dfs.HWmult.forecast[, 1], col = "blue") # prognoza
lines(dfs.HWmult.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności
lines(dfs.HWmult.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności
abline(v = 2019, lty = 2) # dodajemy pionową linię referencyjną, gdzie zaczuna sie okres out-of-sample
title("Model multiplikatywny")
aggregate(HW.summary[, 4:12],
by = list(HW.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
################################################################################
##################### dane niesezonowe #########################################
df <- read_excel("niesez.xls")
class(df)
is.ts(df)
#obiekt time-series
df = ts(data=df$Value, frequency = 12,
start=c(1994,1), end=c(2021,12))
class(df)
# Wykres danych w czasie
plot(df, main = "Realny kurs walutowy Polski")
library(rcompanion)
par(mfrow=c(1,1))
# Wykres danych w czasie
plot(df, main = "Realny kurs walutowy Polski")
# okresy in-sample i out-of-sample
df.in <-
window(df,
end = c(2018, 12))
df.out <-
window(df,
start = c(2019, 01))
df.EWMA <- HoltWinters(df.in,
beta  = FALSE, # beta jest czynnikiem trendu
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.EWMA)
plot(df.EWMA$fitted)
df.EWMA.forecast <- predict(df.EWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
View(df.EWMA.forecast)
View(df.EWMA.forecast)
plot(df)
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
lines(df.EWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.EWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
# podwójne wygładzanie wykładnicze (DEWMA) - z trendem
df.DEWMA <- HoltWinters(df.in,
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.DEWMA)
plot(df.DEWMA$fitted)
df.DEWMA.forecast <- predict(df.EWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
df.DEWMA.forecast <- predict(df.DEWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
plot(df)
lines(df.DEWMA.forecast[, 1], col = "blue") # prognozy
lines(df.DEWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.DEWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("DEWMA")
# model Holta
df.Holt <- HoltWinters(df.in,
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.Holt)
plot(df.Holt$fitted)
df.Holt.forecast <- predict(df.Holt, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
plot(df)
lines(df.Holt.forecast[, 1], col = "blue") # prognozy
lines(df.Holt.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.Holt.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("Holt")
# podwójne wygładzanie wykładnicze (DEWMA) - z trendem
df.DEWMA <- HoltWinters(df.in,
beta  = FALSE, # beta jest czynnikiem trendu
gamma = FALSE) # gamma jest czynnikiem sezonowym
df.DEWMA <- HoltWinters(df.DEWMA,
beta  = FALSE, # beta jest czynnikiem trendu
gamma = FALSE) # gamma jest czynnikiem sezonowym
df.DEWMA <- HoltWinters(df.DEWMA$fitted,
beta  = FALSE, # beta jest czynnikiem trendu
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.EWMA)
plot(df.EWMA$fitted)
plot(df.DEWMA)
plot(df.DEWMA$fitted)
df.DEWMA.forecast <- predict(df.EWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
df.DEWMA.forecast <- predict(df.DEWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
plot(df)
lines(df.DEWMA.forecast[, 1], col = "blue") # prognozy
lines(df.DEWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.DEWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
df.EWMA <- HoltWinters(df.in,
beta  = FALSE, # beta jest czynnikiem trendu
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.EWMA)
plot(df.EWMA$fitted)
df.EWMA.forecast <- predict(df.EWMA, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
plot(df)
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
lines(df.EWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.EWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("EWMA")
# model Holta
df.Holt <- HoltWinters(df.in,
gamma = FALSE) # gamma jest czynnikiem sezonowym
plot(df.Holt)
plot(df.Holt$fitted)
df.Holt.forecast <- predict(df.Holt, # prognoza na 36 obserwacji do przodu
n.ahead = 36,
prediction.interval = TRUE)
plot(df)
lines(df.Holt.forecast[, 1], col = "blue") # prognozy
lines(df.Holt.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.Holt.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("Holt")
df.EWMA$fitted[, 1]
df.Holt$fitted[, 1]
df.EWMA$fitted[, 1]
df.Holt$fitted[, 1]
df.EWMA.summary <- window(df.EWMA$fitted[, 1], end =c(2021, 12) , extend = TRUE)
df.Holt.summary <- window(df.Holt$fitted[, 1], end =c(2021, 12) , extend = TRUE)
window(df.EWMA.summary, start = c(2019, 1)) <- df.EWMA.forecast[, 1]
window(df.Holt.summary, start = c(2019, 1)) <- df.Holt.forecast[, 1]
df.EWMA.summary
df.Holt.summary
Holt.summary <- ts.union(dfs,df.EWMA.summary,df.Holt.summary)
Holt.summary <- ts.union(df,df.EWMA.summary,df.Holt.summary)
library(xts)
Holt.summary = as.xts(Holt.summary)
sample_period <-
ts(ifelse(index(Holt.summary) < "2019-01", 0, 1),
start  =c(1994, 1), freq = 12)
names(Holt.summary)
Holt.summary$sample_period <- sample_period
Holt.summary$mae_Holtadd <- abs(Holt.summary$df.EWMA.summary-Holt.summary$dfs)
Holt.summary$mae_EWMA <- abs(Holt.summary$df.EWMA.summary-Holt.summary$df)
Holt.summary$mse_EWMA   <- (Holt.summary$df.EWMA.summary-Holt.summary$df)^2
Holt.summary$mape_EWMA   <- abs((Holt.summary$df.EWMA.summary-Holt.summary$df)/Holt.summary$df)
Holt.summary$amape_EWMA   <- abs((Holt.summary$df.EWMA.summary-Holt.summary$df)/(Holt.summary$df.EWMA.summary+Holt.summary$df))
Holt.summary$mae_Holtmult    <- abs(Holt.summary$df.Holt.summary-Holt.summary$dfs)
Holt.summary$mae_Holt   <- abs(Holt.summary$df.Holt.summary-Holt.summary$df)
Holt.summary$mse_Holt      <- (Holt.summary$df.Holt.summary-Holt.summary$df)^2
Holt.summary$mape_Holt     <- abs((Holt.summary$df.Holt.summary-Holt.summary$df)/Holt.summary$df)
Holt.summary$amape_Holt    <- abs((Holt.summary$df.Holt.summary-Holt.summary$df)/(Holt.summary$df.Holt.summary+Holt.summary$df))
aggregate(Holt.summary[, 4:12],
by = list(Holt.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
par(mfrow=c(1,2))
plot(df)
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
lines(df.EWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.EWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("EWMA")
plot(df)
lines(df.Holt.forecast[, 1], col = "blue") # prognozy
lines(df.Holt.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.Holt.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("Holt")
plot(df, start = c(2018, 12))
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
plot(window(df, start = c(2018, 12)))
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
lines(df.EWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.EWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("EWMA")
plot(window(df, start = c(2018, 12)))
lines(df.EWMA.forecast[, 1], col = "blue") # prognozy
lines(df.EWMA.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.EWMA.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("EWMA")
plot(window(df, start = c(2018, 12)))
lines(df.Holt.forecast[, 1], col = "blue") # prognozy
lines(df.Holt.forecast[, 2], col = "red", lty = 2) # dolna granica przedziału ufności dla prognozy
lines(df.Holt.forecast[, 3], col = "red", lty = 2) # górna granica przedziału ufności dla prognozy
abline(v = 2019, lty = 2)  # dodajemy pionową linię referencyjną (zeby zobaczyc okres out-of-sample)
title("Holt")
aggregate(Holt.summary[, 4:12],
by = list(Holt.summary$sample_period),
FUN = function(x) mean(x, na.rm = T))
View(Holt.summary)
View(Holt.summary)
